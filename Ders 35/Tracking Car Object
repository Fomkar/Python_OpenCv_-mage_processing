# -*- coding: utf-8 -*-
"""
Created on Mon Jul 12 14:55:22 2021

@author: Ömer Karagöz
"""
"""
Boosting Algoritması
"""
import cv2
import numpy as np
import matplotlib.pyplot as plt
import time
import pandas as pd

OPENCV_OJECT_TRACKERS = {"boosting"   :cv2.legacy.TrackerBoosting_create,
                         "mil"        :cv2.TrackerMIL_create,
                         "tld"        :cv2.legacy.TrackerTLD_create,
                         "medianflow" :cv2.legacy.TrackerMedianFlow_create,
                         "mosse"      :cv2.legacy.TrackerMOSSE_create }

tracker_name = "boosting"
tracker = OPENCV_OJECT_TRACKERS[tracker_name]()
print("Tracker :",tracker_name)

gt = pd.read_csv("gt_new1.txt")

video_path = "MOT17-13-SDP.mp4"
cap = cv2.VideoCapture(video_path)

#genel parametreler
initBB = None
fps = 25
frame_number = []
f =0
success_track_frame_success = 0
track_list = []
start_time = time.time()

while True:
    
    time.sleep(0.3/fps)
    ret, frame = cap.read()
    
    if ret:
        frame = cv2.resize(frame , dsize = (960,540))
        
        (H, W) = frame.shape[:2]
        
        car_gt =gt[gt.frame_no == f]
        if len(car_gt) !=0:
            x = car_gt.x.values[0]
            y = car_gt.y.values[0]
            h = car_gt.h.values[0]
            w = car_gt.w.values[0]
            
            center_x = car_gt.center_x.values[0]
            center_y = car_gt.center_y.values[0]
            
            cv2.rectangle(frame, (x,y), (x+w,y+h), (255,5,250),2)
            cv2.circle(frame, (center_x,center_y), 2 , (100,250,150),-1)
        
        if initBB is not None:
            
            (success, box) = tracker.update(frame)
            
            (x,y,w,h) = [int(i) for i in box]
            
            if f<=np.max(gt.frame_no):
            
                cv2.rectangle(frame, (x,y), (x+w,y+h), (2,2,255),5)
                
                success_track_frame_success = success_track_frame_success +1
                track_center_x = int(x+w/2)
                track_center_y = int(y+h/2)
                track_list.append([f,track_center_x,track_center_y])
                
                info = [("Tracker",tracker_name),
                        ("Success","Yes"if success else "No")]
                
                for (i,(o,p)) in enumerate(info):
                    text ="{} : {}".format(o, p) 
                    cv2.putText(frame, text, (10,H-(i*20)-30), cv2.FONT_HERSHEY_COMPLEX_SMALL, 1, (255,255,255))
                    cv2.putText(frame,"Frame_num :"+str(f),(10,30),cv2.FONT_HERSHEY_DUPLEX,1,(0,2,255),2)
        cv2.imshow("frame",frame)
        key = cv2.waitKey(1) & 0xFF
        
        if key == ord("m"):
            initBB = cv2.selectROI("Frame", frame,fromCenter = False)
        
            tracker.init(frame,initBB)
        elif key == ord("k"):break
        
        frame_number.append(f)
        f = f+1
    else:break

cap.release()
cv2.destroyAllWindows()

stop = time.time()

time_diff =stop - start_time
print("Programın bittiği zaman : {}".format(time_diff))

#değerlendirme
track_df = pd.DataFrame(track_list, columns =["frame_no","center_x","center_y"])

if len(track_df) !=0:
    print("Tracking method : ",tracker)
    print("Time :",time_diff)
    print("Number of frame to track (gt) : ",len(gt))
    print("Number of frame to track (track Success):",success_track_frame_success)
    
    track_df_frame = track_df.frame_no
    
    gt_center_x = gt.center_x[track_df_frame].values
    gt_center_y = gt.center_y[track_df_frame].values

    track_df_center_x = track_df.center_x.values
    track_df_center_y = track_df.center_y.values
    
    plt.plot(np.sqrt((gt_center_x-track_df_center_x)**2 +(gt_center_y-track_df_center_y)**2))
    plt.xlabel("frame")
    plt.ylabel("oklid")
    error = np.sum(np.sqrt((gt_center_x-track_df_center_x)**2 +(gt_center_y-track_df_center_y)**2))
    print("Toplam Hata",error)
